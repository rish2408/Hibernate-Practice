==========================================Jpa with Hibernate========================================

JPA Application:
----------------

Any java application, that uses JPA api to perform persistnce operation(CRUD) operation with the Database software
is called as JPA application.

==========================================JPA architecture===========================================

Entity class or persistence class:-
-----------------------------------

1. It is a class using which we map our table.

2. If we are using the annotaion, then we need not map this class with the table inside the xml mapping file.

3. An Entity class or persistence class is a java class that is developed corresponding to a table of Database.  

4. This class has many instance variables should be there as same as columns in the corresponding table

5. Should take Entity class as a POJO class.

6. We need to provide mapping information with the table in this class only using annotaitons.

Note : When we gives this Persistance/Entity class obj to the ORM software, then ORM software will decide the 
destination Database software based on the configuration done in a xml file which is called as hibernate-configuration 
file.

Configuration file:
-------------------

1. It is an xml file its name is "persistence.xml".

2. This file must be created under src/META-INF folder in normal java application, where as in maven or gradle based 
   application this file should be inside the src/main/resources/META-INF folder

3. This file content will be used by ORM software (ORM engine) to locate the destination Database software.

In this file generally 3 types of details we specify:
-----------------------------------------------------

1. Database connection details

2. ORM specific details (some instruction to the ORM software like dialect info,show_sql ,etc)

3. Annotation based entity/persistence class name. (optional from latest hibernate version)

Note : Generally we take this file one per Database Basis. We should always create this configuration file by 
taking support of example applications inside the project folder of hibernate download zip file or by taking 
the reference from the Google.

for eg :

persistence.xml:-
-----------------

<?xml version="1.0" encoding="UTF-8"?>

<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
             version="2.0">


    <persistence-unit name="studentUnit" >

	<class>com.ratan.Student</class>        

<properties>
         
           <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver" />
          <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/ratandb" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
          
   /*
           <property name="hibernate.connection.driver_class" value="com.mysql.cj.jdbc.Driver"/>
            <property name="hibernate.connection.username" value="root"/>
            <property name="hibernate.connection.password"  value="root"/>
            <property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/ratandb"/>
     */    


        </properties>
    </persistence-unit>
</persistence>

** The root tag is -> <persistence> with some xml-namespace 

** The child tag of <persistence> tag is <persistence-unit>

This <persistence-unit> has 2 child tags:-
-------------------------------------------

1. <class> tag -> Using which we specify the Entity class name(fully qualified name) that used annotations
			to map a table (optional from letest version of hibernate).

2. <properties> tag :- using this tag,we specify some configuration details to the ORM software.


Persistence-unit:- It is a logical name of the configuation of our DB and some other details.

How to get the Hibernate software:
==================================

1. Download the hiberate software (zip file) and add the required jar file in the classpath of our project

2. Maven approach:

hibernate-core jar file

persistence.xml : take this file from sample application or from hibernate docs..
and modify it accordingly.

ORM engine :- 
-------------

** It is a specialized software written in java that performs translation of jpa calls into the sql call by using
mapping annotation and configuration file details and send the mapped sql to the DB s/w using JDBC.

** ORM engine is provided by any ORM software.

Steps to devlop the JPA application:-
-------------------------------------

step 1. Create a maven project(change the java version) and add the hibernate-core dependency to the pom.xml.

step 2. Add jdbc driver related dependency to the pom.xml

step 3. Create a folder called "META-INF" inside src/main/resources folder, and create the "persistence.xml" file 
   	  inside this folder by taking reference from Hibernate docs or from google.

for eg :

<?xml version="1.0" encoding="UTF-8"?>

<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
             version="2.0">

    <persistence-unit name="studentUnit" >


<properties>
         
           <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver" />
          <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/ratandb" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
  

        </properties>

    </persistence-unit>
</persistence>

step 4. Create as many  Entity/Perssitence  classes  as there r tables in the DB, apply the at least 2 annotations 
	  to these classes.

@Entity :- on the top of the class
@Id  :- on the top of PK mapped variable

If we apply above 2 annotations then our java bean class will become Entity or Persistence class. Inside these classes, 
we need to take variable corresponding to the columns of the tables.

step 5. Create a client application and activate ORM engine by using JPA api related following classes and interface and
 	  perform the DB operations.

1.Persistence class 

2.EntityManagerFactory

3.EntityManager

If we use Hibernate core API then we need to use
-------------------------------------------------

Configuration class

SessionFactory(I)

Session(I)

for eg :

Student.java  (Entity class) 
----------------------------

package com.masai;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Student {

	@Id
	private int roll;
	
	private int marks;
	private String name;
	
	public Student() {
		// TODO Auto-generated constructor stub
	}

	public Student(int roll, String name, int marks) {
		super();
		this.roll = roll;
		this.name = name;
		this.marks = marks;
	}

	public int getRoll() {
		return roll;
	}

	public void setRoll(int roll) {
		this.roll = roll;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getMarks() {
		return marks;
	}

	public void setMarks(int marks) {
		this.marks = marks;
	}

	@Override
	public String toString() {
		return "Student [roll=" + roll + ", name=" + name + ", marks=" + marks + "]";
	}
	
}

Demo.java:
-------------

package com.masai;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class Demo {

	public static void main(String[] args) {
		
		EntityManagerFactory emf= Persistence.createEntityManagerFactory("studentUnit");
		
		
		EntityManager em= emf.createEntityManager();
		
		
		Student student= em.find(Student.class, 20);
		
		if(student != null)
			System.out.println(student);
		else
			System.out.println("Student does not exist");
		
		em.close();
		

	}

}

To get the Object from the Database we need to call find(--) method of EntityManager object
--------------------------------------------------------------------------------------------

This find(--) method takes 2 parameter 

1. The Classname of the Object which we want,

2. The ID value for which we want the object.

Note : When we call createEntityManagerFactory(-) method by suppliying persistence-unit name on the Persistence class,
we will get the EntityManagerFactory object.

** This method loads the "persistence.xml" file into the memory

** EntityManagerFactory obj should be only one per application per Database.

** This EMF obj contains connection pool (readly available some jdbc connection obj) and some meta information

** This EMF is a heavy weight object and by using this EMF class only we create the EntityManager object.

** EMF is a heavy weight object, it should be one per application

EntityManager em = emf.createEntityManager();
 
Note : Inside every DAO method(for every use case) we need to get the EntityManager obj after performing the DB 
opeation for that use-case we should close the EM obj. 

EM should be one per use-case (one per DAO method)


JPA application ----------------->EntityManager(I) --------------------->ORM engine ------>JDBC------------>DB s/w


Inserting a Record:
-------------------

In order to perform any DML (insert update delete ) the method calls should be in a transactional area.

em.getTransaction(); method return "javax.persistence.EntityTransaction(I) " object.

This EntityTransaction obj is a singleton object, i.e per EntityManager obj, only one Transaction object is created.
To store the object we need to call persist(-) method on the EM object.

for eg :

Demo.java: (Insert operation)
-----------------------------

package com.masai;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class Demo {

	public static void main(String[] args) {
		
		EntityManagerFactory emf= Persistence.createEntityManagerFactory("studentUnit");
		
		
		EntityManager em= emf.createEntityManager();
		
		Student student= new Student(30, "Ratan", 500);
		
		
//		EntityTransaction et= em.getTransaction();
//		
//		et.begin();
//		
//		em.persist(student);
//		
//		et.commit();
		
		
		em.getTransaction().begin();
		
		em.persist(student);
		
		em.getTransaction().commit();
		
		
		
		
		System.out.println("done...");
		
		
		
		
		em.close();
		

	}

}

Main.java:- Delete
--------------------

public class Main {
	
	public static void main(String[] args) {
		
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("studentUnit");
		
		EntityManager em= emf.createEntityManager();
		
	
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter roll to delete ");
		int roll=sc.nextInt();
		
		Student student= em.find(Student.class, roll);
		
		if(student != null){
			
			em.getTransaction().begin();
			
			em.remove(student);
			
			em.getTransaction().commit();
			
			
			System.out.println("Student removed....");
			
		}else
			System.out.println("Student not found...");
		
		em.close();
		
		
		System.out.println("done");
		
		
	}

}



Main.java :- Update the marks:-
--------------------------------

public class Main {
	
	public static void main(String[] args) {
		
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("studentUnit");
		
		EntityManager em= emf.createEntityManager();
		
	
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter roll to give grace marks ");
		int roll=sc.nextInt();
		
		Student student=em.find(Student.class, roll); //if it returns the obj then the obj will be in p.state
		
		
		if(student == null){
			System.out.println("Student does not exist..");
		}
		else
		{
			
			System.out.println("Enter the grace marks");
			int marks=sc.nextInt();
			
			em.getTransaction().begin();
			
			student.setMarks(student.getMarks()+marks);
			
			em.getTransaction().commit();
			
			System.out.println("Marks is graced...");
			
		}
		em.close();
	
		System.out.println("done");
		
		
	}

}

In the above application we didn't call any update method, we just change the state of the persistence/entity obj
inside the transactional area, at the end of the tx , ORM engine will generate the update sql.

This is known as the ORM s/w maintaining synchronization bt entity obj and the db table records.
We have a method called merge() inside the EntityManager obj to update a record also.

Life-cycle of persistence/entity object:-
-----------------------------------------

An entity obj has the 3 life-cycle state:-

1. new state/transient state

2. persistence state/managed state

3. detached state


1.new state/transient state:- 
-----------------------------

If we create a object of persistence class and this class is not attached with the EM obj, then
this stage is known as new state/transient state

Student s=new Student(10,"ram",780);


2.persistence state:- 
---------------------

If a persistence class obj or Entity obj is associated with EM obj, then this obj will be in persistence state.

for eg :

When we call a persist(-) method by supplying Student entity obj then at time student obj will be in persistence state

or

when we call find() method and this method returns the Student obj, then that obj will also be in persistence state.

Note : when an entity class obj is in persisitence state ,it is in-sync with the DB table ,i.e 
any change made on that obj inside the tx area will reflect to the table automatically.

for eg :

		Student s=new Student(150,"manoj",850); // here student obj is in transient state .
		
		em.getTransaction().begin();
		
		em.persist(s); // here it is in the persistence state
		
		s.setMarks(900);
				
		em.getTransaction().commit();
		

detached state:-
----------------

When we call close() method or call clear() method on the EM obj, then all the associated entity obj will be in 
detached state. In this stage the entity objs will not be in-sync with the table.

Note : We have a merge() method in EM obj, when we call this method by supplying any detached object then that 
detached object will bring back in the persistence state.

for eg:

Main.java:-
------------

public class Main {
	
	public static void main(String[] args) {
		
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("studentUnit");
		
		EntityManager em= emf.createEntityManager();
		
		Student s= em.find(Student.class, 20); //persistence state
		
		em.clear(); //detached state
		
		em.getTransaction().begin();
		
		s.setMarks(500);
	
		//em.persist(s);// it will throw duplicate ID related exception
		em.merge(s); //persistence state
	
		em.getTransaction().commit();
		
		em.close();	

		System.out.println("done");	
	}
}


em.persist()
em.find()------------>persistence state-----------em.close(), em.clear()--------->detached state---->em.merge()--->reflect in the table.

--after merge() method, we can not do modification on that object(it will not be reflected.).




